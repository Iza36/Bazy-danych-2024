_____________________________________________________________________________________________________________________________

1 lekcja:

_____________________________________________________________________________________________________________________________



_____________________Zadanie 1_______________________


CREATE TABLE postac (
    id_postaci SERIAL PRIMARY KEY,
    nazwa VARCHAR(40),
    rodzaj VARCHAR(10) CHECK (rodzaj IN ('wiking', 'ptak', 'kobieta')),
    data_ur DATE,
    wiek INT
);


INSERT INTO postac (nazwa, rodzaj, data_ur, wiek) VALUES
('Bjorn', 'wiking', '1990-05-14', 34),
('Drozd', 'ptak', '2018-06-21', 6),
('Tesciowa', 'kobieta', '1936-03-15', 87);


UPDATE postac SET wiek = 88 WHERE nazwa = 'Tesciowa';



_____________________Zadanie 2_______________________ 


CREATE TABLE walizka (
    id_walizki SERIAL PRIMARY KEY,
    pojemnosc INT,
    kolor VARCHAR(10) DEFAULT 'rozowy' CHECK (kolor IN ('rozowy', 'czerwony', 'teczowy', 'zolty')),
    id_wlasciciela INT REFERENCES postac(id_postaci) ON DELETE CASCADE
);


INSERT INTO walizka (pojemnosc, id_wlasciciela) VALUES
(30, (SELECT id_postaci FROM postac WHERE nazwa = 'Bjorn')),
(25, (SELECT id_postaci FROM postac WHERE nazwa = 'Tesciowa'));



_____________________Zadanie 3_______________________


CREATE TABLE izba (
    adres_budynku VARCHAR(50),
    nazwa_izby VARCHAR(50),
    metraz INT,
    wlasciciel INT REFERENCES postac(id_postaci) ON DELETE SET NULL,
    PRIMARY KEY (adres_budynku, nazwa_izby)
);


ALTER TABLE izba ADD COLUMN kolor VARCHAR(10) DEFAULT 'czarny';


INSERT INTO izba (adres_budynku, nazwa_izby, metraz, wlasciciel) VALUES
('Chatka Bjorna', 'spiarnia', 15, (SELECT id_postaci FROM postac WHERE nazwa = 'Bjorn'));



_____________________Zadanie 4_______________________

CREATE TABLE przetwory (
    id_przetworu SERIAL PRIMARY KEY,
    rok_produkcji INT DEFAULT 1654,
    id_wykonawcy INT REFERENCES postac(id_postaci),
    zawartosc VARCHAR(100),
    dodatek VARCHAR(50) DEFAULT 'papryczka chilli',
    id_konsumenta INT REFERENCES postac(id_postaci)
);


INSERT INTO przetwory (rok_produkcji, id_wykonawcy, zawartosc, dodatek, id_konsumenta) VALUES
(2024, (SELECT id_postaci FROM postac WHERE nazwa = 'Bjorn'), 'bigos', 'papryczka chilli', (SELECT id_postaci FROM postac WHERE nazwa = 'Tesciowa'));


_____________________Zadanie 5_______________________

CREATE TABLE statek (
    nazwa_statku VARCHAR(50) PRIMARY KEY,
    rodzaj_statku VARCHAR(20) NOT NULL,
    data_wodowania DATE NOT NULL,
    max_ladownosc INT UNSIGNED NOT NULL
);


INSERT INTO statek (nazwa_statku, rodzaj_statku, data_wodowania, max_ladownosc) VALUES
('Drakkar', 'dlugi', '1000-05-01', 200),
('Knorr', 'handlowy', '1100-08-15', 150),
('SzybkaFala', 'fregata', '1150-07-25', 300);


ALTER TABLE postac ADD COLUMN nazwa_statku VARCHAR(50);


ALTER TABLE postac ADD CONSTRAINT FK_statek FOREIGN KEY (nazwa_statku) REFERENCES statek(nazwa_statku);


UPDATE postac SET nazwa_statku = 'Drakkar' WHERE rodzaj = 'wiking';


DELETE FROM izba WHERE nazwa_izby = 'spizarnia';

_______________________________________________________________________________________________________________________________

 2 lekcja:
_____________________________________________________________________________________________________________________________



_____________________Zadanie 1_______________________



DELETE FROM postac

WHERE id_postaci IN (
    SELECT id_postaci FROM postac
    WHERE rodzaj = 'wiking'
    ORDER BY wiek DESC
    LIMIT 2
) AND nazwa != 'Bjorn';


ALTER TABLE postac DROP CONSTRAINT postac_pkey;




_____________________Zadanie 2_______________________ 



ALTER TABLE postac ADD COLUMN pesel VARCHAR(11) PRIMARY KEY;


ALTER TABLE postac ALTER COLUMN rodzaj TYPE VARCHAR(15);
UPDATE postac SET rodzaj = 'syrena' WHERE nazwa = 'Gertruda Nieszczera';


INSERT INTO postac (nazwa, rodzaj, data_ur, wiek, pesel) 
VALUES ('Gertruda Nieszczera', 'syrena', '2000-01-01', 500, '12345678901');




_____________________Zadanie 3_______________________


UPDATE postac SET nazwa_statku = 'Drakkar' 
WHERE nazwa LIKE '%a%' AND rodzaj = 'wiking';


UPDATE statek SET max_ladownosc = max_ladownosc * 0.7
WHERE EXTRACT(YEAR FROM data_wodowania) BETWEEN 1900 AND 1999;


CHECK (wiek <= 1000);




_____________________Zadanie 4_______________________



INSERT INTO postac (nazwa, rodzaj, data_ur, wiek) 
VALUES ('Loko', 'waz', '2000-01-01', 10);


CREATE TABLE Marynarz AS
SELECT * FROM postac
WHERE nazwa_statku IS NOT NULL;


ALTER TABLE Marynarz ADD CONSTRAINT marynarz_pkey PRIMARY KEY (id_postaci);


ALTER TABLE Marynarz ADD CONSTRAINT fk_postac FOREIGN KEY (id_postaci) REFERENCES postac(id_postaci);





_____________________Zadanie 5_______________________


UPDATE postac SET nazwa_statku = NULL;


DELETE FROM postac WHERE rodzaj = 'wiking' LIMIT 1;


DELETE FROM statek;


DROP TABLE statek;


CREATE TABLE zwierz (
    id SERIAL PRIMARY KEY,
    nazwa VARCHAR(50),
    wiek INT
);


INSERT INTO zwierz (nazwa, wiek)
SELECT nazwa, wiek FROM postac WHERE rodzaj IN ('ptak', 'waz', 'syrena');




_______________________________________________________________________________________________________________________________

 3 lekcja:
_____________________________________________________________________________________________________________________________




_____________________Zadanie 1_______________________



CREATE TABLE kreatura_copy AS SELECT * FROM wikingowie.kreatura;
CREATE TABLE zasob_copy AS SELECT * FROM wikingowie.zasob;
CREATE TABLE ekwipunek_copy AS SELECT * FROM wikingowie.ekwipunek;



SELECT * FROM zasob_copy;


SELECT * FROM zasob_copy WHERE typ = 'jedzenie';


SELECT idZasobu, ilosc 
FROM ekwipunek_copy 
WHERE idKreatury IN (1, 3, 5);




_____________________Zadanie 2_______________________ 


SELECT * 
FROM kreatura_copy 
WHERE rodzaj != 'wiedzma' AND waga >= 50;


SELECT * 
FROM zasob_copy 
WHERE waga BETWEEN 2 AND 5;


SELECT * 
FROM kreatura_copy 
WHERE nazwa LIKE '%or%' AND waga BETWEEN 30 AND 70;





_____________________Zadanie 3_______________________


SELECT * 
FROM zasob_copy 
WHERE MONTH(data_pozyskania) IN (7, 8);


SELECT * 
FROM zasob_copy 
WHERE rodzaj IS NOT NULL 
ORDER BY waga ASC;


SELECT * 
FROM kreatura_copy 
ORDER BY data_urodzenia ASC 
LIMIT 5;




_____________________Zadanie 4_______________________


SELECT DISTINCT rodzaj 
FROM zasob_copy;


SELECT CONCAT(nazwa, ' - ', rodzaj) AS nazwa_rodzaj 
FROM kreatura_copy 
WHERE rodzaj LIKE 'wi%';


SELECT nazwa, ilosc * waga AS calkowita_waga 
FROM zasob_copy 
WHERE YEAR(data_pozyskania) BETWEEN 2000 AND 2007;




_____________________Zadanie 4_______________________


SELECT nazwa, 
       waga * 0.7 AS masa_netto, 
       waga * 0.3 AS masa_odpadow 
FROM zasob_copy 
WHERE typ = 'jedzenie';


SELECT * 
FROM zasob_copy 
WHERE rodzaj IS NULL;


SELECT DISTINCT rodzaj 
FROM zasob_copy 
WHERE nazwa LIKE 'Ba%' OR nazwa LIKE '%os' 
ORDER BY rodzaj ASC;





_______________________________________________________________________________________________________________________________

 4 lekcja:
_____________________________________________________________________________________________________________________________




_____________________Zadanie 1_______________________


SELECT AVG(waga) AS srednia_waga 
FROM kreatura;


SELECT rodzaj, 
       AVG(waga) AS srednia_waga, 
       COUNT(*) AS liczba_kreatur 
FROM kreatura 
GROUP BY rodzaj;


SELECT rodzaj, 
       AVG(YEAR(CURDATE()) - YEAR(data_urodzenia)) AS sredni_wiek 
FROM kreatura 
GROUP BY rodzaj;




_____________________Zadanie 2_______________________


SELECT rodzaj, 
       SUM(waga) AS suma_wag 
FROM zasob 
GROUP BY rodzaj;


SELECT nazwa, 
       AVG(waga) AS srednia_waga 
FROM zasob 
WHERE ilosc >= 4 
GROUP BY nazwa 
HAVING SUM(waga) > 10;


SELECT rodzaj, 
       COUNT(DISTINCT nazwa) AS liczba_nazw 
FROM zasob 
GROUP BY rodzaj 
HAVING MIN(ilosc) > 1;




_____________________Zadanie 3_______________________



SELECT k.nazwa AS kreatura, 
       SUM(e.ilosc) AS ilosc_zasobow 
FROM kreatura k 
JOIN ekwipunek e ON k.idKreatury = e.idKreatury 
GROUP BY k.idKreatury;


SELECT k.nazwa AS kreatura, 
       GROUP_CONCAT(z.nazwa SEPARATOR ', ') AS zasoby 
FROM kreatura k 
JOIN ekwipunek e ON k.idKreatury = e.idKreatury 
JOIN zasob z ON e.idZasobu = z.idZasobu 
GROUP BY k.idKreatury;


SELECT nazwa 
FROM kreatura 
WHERE idKreatury NOT IN (SELECT DISTINCT idKreatury FROM ekwipunek);





_____________________Zadanie 4_______________________



SELECT k.nazwa AS wiking, z.nazwa AS zasob 
FROM kreatura k 
NATURAL JOIN ekwipunek 
NATURAL JOIN zasob 
WHERE YEAR(k.data_urodzenia) BETWEEN 1670 AND 1679;


SELECT k.nazwa 
FROM kreatura k 
JOIN ekwipunek e ON k.idKreatury = e.idKreatury 
JOIN zasob z ON e.idZasobu = z.idZasobu 
WHERE z.typ = 'jedzenie' 
ORDER BY k.data_urodzenia DESC 
LIMIT 5;


SELECT k1.nazwa AS kreatura_1, k2.nazwa AS kreatura_2 
FROM kreatura k1 
JOIN kreatura k2 ON ABS(k1.idKreatury - k2.idKreatury) = 5;





_____________________Zadanie 5_______________________



SELECT k.rodzaj, 
       AVG(z.waga * e.ilosc) AS srednia_waga 
FROM kreatura k 
JOIN ekwipunek e ON k.idKreatury = e.idKreatury 
JOIN zasob z ON e.idZasobu = z.idZasobu 
WHERE k.rodzaj NOT IN ('małpa', 'wąż') 
GROUP BY k.rodzaj 
HAVING SUM(e.ilosc) < 30;


SELECT rodzaj, 
       nazwa AS najmłodsza_kreatura, 
       data_urodzenia AS data_najmłodszej 
FROM kreatura 
WHERE data_urodzenia = (SELECT MAX(data_urodzenia) FROM kreatura WHERE rodzaj = k.rodzaj) 
UNION 
SELECT rodzaj, 
       nazwa AS najstarsza_kreatura, 
       data_urodzenia AS data_najstarszej 
FROM kreatura k 
WHERE data_urodzenia = (SELECT MIN(data_urodzenia) FROM kreatura WHERE rodzaj = k.rodzaj);




_______________________________________________________________________________________________________________________________

 5 lekcja:
_____________________________________________________________________________________________________________________________



_____________________Zadanie 1_______________________



CREATE TABLE kopia_kreatura AS 
SELECT * FROM kreatura;


CREATE TABLE kopia_nazwa_tabeli AS 
SELECT * FROM nazwa_tabeli;


SELECT k.nazwa 
FROM kreatura k 
LEFT JOIN uczestnicy u ON k.idKreatury = u.idKreatury 
WHERE u.idWyprawy IS NULL;


SELECT w.nazwa AS wyprawa, 
       SUM(e.ilosc) AS suma_ekwipunku 
FROM wyprawa w 
JOIN uczestnicy u ON w.idWyprawy = u.idWyprawy 
JOIN ekwipunek e ON u.idKreatury = e.idKreatury 
GROUP BY w.idWyprawy;




_____________________Zadanie 2_______________________


SELECT w.nazwa AS wyprawa, 
       COUNT(u.idKreatury) AS liczba_uczestnikow, 
       GROUP_CONCAT(k.nazwa SEPARATOR ', ') AS uczestnicy 
FROM wyprawa w 
JOIN uczestnicy u ON w.idWyprawy = u.idWyprawy 
JOIN kreatura k ON u.idKreatury = k.idKreatury 
GROUP BY w.idWyprawy;

SELECT w.nazwa AS wyprawa, 
       e.kolejnosc, 
       e.nazwa AS etap, 
       s.nazwa AS sektor, 
       k.nazwa AS kierownik 
FROM etapy_wyprawy e 
JOIN sektor s ON e.idSektora = s.idSektora 
JOIN wyprawa w ON e.idWyprawy = w.idWyprawy 
JOIN kreatura k ON w.idKierownika = k.idKreatury 
ORDER BY w.data_poczatku, e.kolejnosc;




_____________________Zadanie 3_______________________


SELECT s.nazwa AS sektor, 
       IFNULL(COUNT(e.idSektora), 0) AS liczba_odwiedzin 
FROM sektor s 
LEFT JOIN etapy_wyprawy e ON s.idSektora = e.idSektora 
GROUP BY s.idSektora;


SELECT k.nazwa, 
       CASE 
           WHEN COUNT(u.idWyprawy) > 0 THEN 'brał udział w wyprawie' 
           ELSE 'nie brał udziału w wyprawie' 
       END AS status 
FROM kreatura k 
LEFT JOIN uczestnicy u ON k.idKreatury = u.idKreatury 
GROUP BY k.idKreatury;





_____________________Zadanie 4_______________________


SELECT w.nazwa AS wyprawa, 
       SUM(LENGTH(e.dziennik)) AS suma_znakow 
FROM wyprawa w 
JOIN etapy_wyprawy e ON w.idWyprawy = e.idWyprawy 
GROUP BY w.idWyprawy 
HAVING suma_znakow < 400;


SELECT w.nazwa AS wyprawa, 
       SUM(z.waga * e.ilosc) / COUNT(DISTINCT u.idKreatury) AS srednia_waga 
FROM wyprawa w 
JOIN uczestnicy u ON w.idWyprawy = u.idWyprawy 
JOIN ekwipunek e ON u.idKreatury = e.idKreatury 
JOIN zasob z ON e.idZasobu = z.idZasobu 
GROUP BY w.idWyprawy;




_____________________Zadanie 5_______________________


SELECT k.nazwa AS kreatura, 
       DATEDIFF(w.data_poczatku, k.data_urodzenia) AS wiek_w_dniach 
FROM wyprawa w 
JOIN etapy_wyprawy e ON w.idWyprawy = e.idWyprawy 
JOIN sektor s ON e.idSektora = s.idSektora 
JOIN uczestnicy u ON w.idWyprawy = u.idWyprawy 
JOIN kreatura k ON u.idKreatury = k.idKreatury 
WHERE s.nazwa = 'chatka dziadka';




_______________________________________________________________________________________________________________________________

 6 lekcja:
_____________________________________________________________________________________________________________________________



_____________________Zadanie 1_______________________



CREATE TRIGGER sprawdz_wage 
BEFORE INSERT OR UPDATE ON kreatura 
FOR EACH ROW 
BEGIN
    IF NEW.waga <= 0 THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Waga musi być większa od zera';
    END IF;
END;




_____________________Zadanie 2_______________________



CREATE TABLE archiwum_wypraw (
    id_wyprawy INT,
    nazwa VARCHAR(255),
    data_rozpoczecia DATE,
    data_zakonczenia DATE,
    kierownik VARCHAR(255)
);


CREATE TRIGGER przenies_do_archiwum 
AFTER DELETE ON wyprawa 
FOR EACH ROW 
BEGIN
    DECLARE nazwa_kierownika VARCHAR(255);
    SELECT nazwa INTO nazwa_kierownika FROM kreatura WHERE idKreatury = OLD.idKierownika;

    INSERT INTO archiwum_wypraw (id_wyprawy, nazwa, data_rozpoczecia, data_zakonczenia, kierownik)
    VALUES (OLD.idWyprawy, OLD.nazwa, OLD.data_poczatku, OLD.data_konca, nazwa_kierownika);
END;





_____________________Zadanie 3_______________________


CREATE PROCEDURE eliksir_sily (IN id_kreatury INT)
BEGIN
    UPDATE kreatura 
    SET udzwig = udzwig * 1.2 
    WHERE idKreatury = id_kreatury;
END;



CREATE FUNCTION tekst_w_wielkich_literach (tekst VARCHAR(255)) 
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
    RETURN UPPER(tekst);
END;





_____________________Zadanie 4_______________________


CREATE TABLE system_alarmowy (
    id_alarmu INT AUTO_INCREMENT PRIMARY KEY,
    wiadomosc VARCHAR(255)
);



CREATE TRIGGER alarm_tesciowej 
AFTER INSERT ON wyprawa 
FOR EACH ROW 
BEGIN
    DECLARE liczba_etapow INT;

    SELECT COUNT(*) INTO liczba_etapow
    FROM etapy_wyprawy e 
    JOIN sektor s ON e.idSektora = s.idSektora
    WHERE e.idWyprawy = NEW.idWyprawy AND s.nazwa = 'chatka dziadka';

    IF NEW.idKierownika = (SELECT idKreatury FROM kreatura WHERE nazwa = 'teściowa') AND liczba_etapow > 0 THEN
        INSERT INTO system_alarmowy (wiadomosc) 
        VALUES ('Teściowa nadchodzi !!!');
    END IF;
END;





_____________________Zadanie 5_______________________



CREATE PROCEDURE statystyki_udzwigu (OUT srednia FLOAT, OUT suma FLOAT, OUT maks FLOAT)
BEGIN
    SELECT AVG(udzwig), SUM(udzwig), MAX(udzwig) 
    INTO srednia, suma, maks 
    FROM kreatura;
END;



CREATE PROCEDURE sektory_wyprawy (IN id_wyprawy INT)
BEGIN
    DECLARE zakonczone BOOLEAN DEFAULT FALSE;
    DECLARE numer_sektora, nazwa_sektora VARCHAR(255);
    DECLARE sektor_cursor CURSOR FOR 
        SELECT s.numer, s.nazwa 
        FROM etapy_wyprawy e 
        JOIN sektor s ON e.idSektora = s.idSektora 
        WHERE e.idWyprawy = id_wyprawy 
        ORDER BY e.kolejnosc;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET zakonczone = TRUE;

    OPEN sektor_cursor;
    REPEAT
        FETCH sektor_cursor INTO numer_sektora, nazwa_sektora;
        IF NOT zakonczone THEN
            SELECT CONCAT(numer_sektora, ' - ', nazwa_sektora) AS sektor;
        END IF;
    UNTIL zakonczone END REPEAT;
    CLOSE sektor_cursor;
END;

