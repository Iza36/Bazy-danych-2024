LEKCJA 1 MYSQL


Zadanie 1


CREATE TABLE postac (
id_postaci SERIAL PRIMARY KEY,
nazwa VARCHAR(40),
rodzaj VARCHAR(10) CHECK (rodzaj IN ('wiking', 'ptak', 'kobieta')),
data_ur DATE,
wiek INT
);

INSERT INTO postac (nazwa, rodzaj, data_ur, wiek) VALUES
('Bjorn', 'wiking', '1990-05-14', 34),
('Drozd', 'ptak', '2018-06-21', 6),
('Tesciowa', 'kobieta', '1936-03-15', 87);

UPDATE postac SET wiek = 88 WHERE nazwa = 'Tesciowa';


Zadanie 2


CREATE TABLE walizka (
id_walizki SERIAL PRIMARY KEY,
pojemnosc INT,
kolor VARCHAR(10) DEFAULT 'rowy' CHECK (kolor IN ('rozowy', 'czerwony', 'teczowy', 'zolty')),
id_wlasciciela INT REFERENCES postac(id_postaci) ON DELETE CASCADE
);

INSERT INTO walizka (pojemnosc, id_wlasciciela) VALUES
(30, (SELECT id_postaci FROM postac WHERE nazwa = 'Bjorn')),
(25, (SELECT id_postaci FROM postac WHERE nazwa = 'Tesciowa'));


Zadanie 3


CREATE TABLE izba (
adres_budynku VARCHAR(50),
nazwa_izby VARCHAR(50),
metraz INT,
wlasciciel INT REFERENCES postac(id_postaci) ON DELETE SET NULL,
PRIMARY KEY (adres_budynku, nazwa_izby)
);

ALTER TABLE izba ADD COLUMN kolor VARCHAR(10) DEFAULT 'czarny';

INSERT INTO izba (adres_budynku, nazwa_izby, metraz, wlasciciel) VALUES
('Chatka Bjorna', 'spiarnia', 15, (SELECT id_postaci FROM postac WHERE nazwa = 'Bjorn'));


Zadanie 4


CREATE TABLE przetwory (
id_przetworu SERIAL PRIMARY KEY,
rok_produkcji INT DEFAULT 1654,
id_wykonawcy INT REFERENCES postac(id_postaci),
zawartosc VARCHAR(100),
dodatek VARCHAR(50) DEFAULT 'papryczka chilli',
id_konsumenta INT REFERENCES postac(id_postaci)
);

INSERT INTO przetwory (rok_produkcji, id_wykonawcy, zawartosc, dodatek, id_konsumenta) VALUES
(2024, (SELECT id_postaci FROM postac WHERE nazwa = 'Bjorn'), 'bigos', 'papryczka chilli', (SELECT id_postaci FROM postac WHERE nazwa = 'Tesciowa'));


Zadanie 5


INSERT INTO postac (pesel, nazwa, rodzaj, wiek, funkcja) VALUES 
('11111111111', 'Bjorn', 'wiking', 35, NULL),
('22222222222', 'Olaf', 'wiking', 30, NULL),
('33333333333', 'Erik', 'wiking', 40, NULL),
('44444444444', 'Leif', 'wiking', 28, NULL),
('55555555555', 'Harald', 'wiking', 50, NULL);


CREATE TABLE statek (
nazwa_statku VARCHAR(50) PRIMARY KEY,
rodzaj_statku ENUM('dlugi', 'handlowy', 'wojenny') NOT NULL,
data_wodowania DATE NOT NULL,
max_ladownosc INT UNSIGNED NOT NULL
);


INSERT INTO Statek (NazwaStatku, RodzajStatku, DataWodowania, MaxLadownosc) VALUES 
('Drakkar', 'Karaka', '1020-05-12', 500),
('SzybkaFala', 'Fregata', '1150-07-25', 300);


INSERT INTO statek (nazwa_statku, rodzaj_statku, data_wodowania, max_ladownosc) VALUES
('Drakkar', 'dlugi', '1000-05-01', 200),
('Knorr', 'handlowy', '1100-08-15', 150);

ALTER TABLE postac ADD Funkcja VARCHAR(50);

ALTER TABLE postac CHANGE COLUMN id_statku nazwa_statku VARCHAR(50);
ALTER TABLE postac MODIFY COLUMN nazwa_statku VARCHAR(50);
ALTER TABLE postac 
ADD CONSTRAINT FK_stateknazwa 
FOREIGN KEY (nazwa_statku) 
REFERENCES statek(nazwa_statku);

SELECT * FROM postac WHERE nazwa_statku NOT IN (SELECT nazwa_statku FROM statek);


ALTER TABLE postac ADD CONSTRAINT FK_stateknazwa FOREIGN KEY (stateknazwa) REFERENCES statek(nazwastatku);


UPDATE postac
SET nazwa_statku = 'Drakkar'
WHERE rodzaj = 'Wiking'
LIMIT 3;

UPDATE postac SET nazwa_statku = 'Drakkar' WHERE nazwa_statku IS NULL;

INSERT INTO statek (nazwa_statku, rodzaj_statku, data_wodowania, max_ladownosc)
VALUES ('SzybkaFala', 'dugi', '2000-01-01', 300);

UPDATE postac SET nazwa_statku = 'SzybkaFala' WHERE rodzaj = 'Wiking' AND nazwa_statku IS NULL;
UPDATE postac SET nazwa_statku = 'SzybkaFala' WHERE rodzaj = 'Ptak' AND nazwa = 'Drozd';


DELETE FROM izba WHERE NazwaIzby = 'Spizarnia';

DROP TABLE izba;

_________________________________________________________________________________

LEKCJA 2 MYSQL

zadanie 1

DELETE FROM postac
WHERE nazwa != 'Bjorn'
ORDER BY wiek
DESC  LIMIT 2;


ALTER TABLE postac DROP PRIMARY KEY;


zadanie 2

UPDATE postac 
SET pesel = LPAD(id_postaci, 11, '0') 
WHERE pesel IS NULL;

ALTER TABLE postac MODIFY pesel CHAR(11) NOT NULL;

ALTER TABLE postac ADD PRIMARY KEY (pesel);

ALTER TABLE postac MODIFY rodzaj VARCHAR(50);


ALTER TABLE postac ADD COLUMN pesel CHAR(11) NOT NULL PRIMARY KEY;

ALTER TABLE postac MODIFY COLUMN rodzaj VARCHAR(255);

INSERT INTO postac (pesel, nazwa, rodzaj, wiek) VALUES ('12345678901', 'Gertruda Nieszczera', 'syrena', 200);
(nie dzialalo zmiana w tabeli)­


ALTER TABLE postac DROP CONSTRAINT postac_chk_1;

ALTER TABLE postac ADD CONSTRAINT postac_chk_1 CHECK (rodzaj IN ('wiking', 'ptak', 'kobieta', 'syrena'));

INSERT INTO postac (pesel, nazwa, rodzaj, wiek) VALUES ('12345678901', 'Gertruda Nieszczera', 'syrena', 200);



zadanie 3
UPDATE postac
SET nazwa_statku = 'Bjorn'
WHERE nazwa LIKE '%a%';

UPDATE statek
SET max_ladownosc = max_ladownosc * 0.7
WHERE YEAR(data_wodowania) BETWEEN 1900 AND 1999;

ALTER TABLE postac
ADD CONSTRAINT postac_chk_wiek CHECK (wiek <= 1000);


Zadanie 4 

INSERT INTO postac (nazwa, rodzaj, data_ur, wiek)
VALUES ('Loko', 'wez', '2024-01-01', 10);

ALTER TABLE postac MODIFY COLUMN pesel CHAR(11) DEFAULT '00000000000';

INSERT INTO postac (nazwa, rodzaj, data_ur, wiek)
VALUES ('Loko', 'wez', '2024-01-01', 10);

CREATE TABLE Marynarz AS
SELECT * FROM postac
WHERE nazwa_statku IS NOT NULL;

ALTER TABLE Marynarz
ADD CONSTRAINT FK_new_stateknazwa FOREIGN KEY (nazwa_statku) REFERENCES statek(nazwa_statku);
ALTER TABLE Marynarz 
  ADD CONSTRAINT FK_statek_nazwa_statku FOREIGN KEY (nazwa_statku) 
  REFERENCES statek(nazwa_statku);

zadanie 5

UPDATE postac
SET nazwa_statku = NULL;

DELETE FROM postac
WHERE nazwa = 'Bjorn';

UPDATE Marynarz SET nazwa_statku = NULL;

DELETE FROM statek;
ALTER TABLE Marynarz DROP FOREIGN KEY FK_statek_statki;

(inaczej mam zapisane przypadkiem)

DROP TABLE statek;


CREATE TABLE zwierz (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nazwa VARCHAR(50),
  wiek INT
);


INSERT INTO zwierz (nazwa, wiek)
SELECT nazwa, wiek
FROM postac
WHERE rodzaj = 'waz';


___________________________________________________________________________________________________________________________________
Lekcja 3

Zadanie 1 

CREATE TABLE kreatura AS SELECT * FROM wikingowie.kreatura;
CREATE TABLE zasob AS SELECT * FROM wikingowie.zasob;
CREATE TABLE ekwipunek AS SELECT * FROM wikingowie.ekwipunek;

SELECT * FROM zasob;

SELECT * FROM zasob WHERE rodzaj = 'jedzenie';

SELECT z.idZasobu, e.ilosc
FROM zasob z
JOIN ekwipunek e ON z.idZasobu = e.idZasobu
WHERE e.idKreatury IN (1, 3, 5);


Zadanie 2

SELECT * FROM kreatura WHERE nazwa != 'wiedźma' AND waga >= 50;

SELECT * FROM zasob WHERE waga BETWEEN 2 AND 5;

SELECT * FROM kreatura WHERE nazwa LIKE '%or%' AND waga BETWEEN 30 AND 70;


Zadanie 3

SELECT * FROM zasob WHERE MONTH(dataPozyskania) IN (7, 8);
SELECT * FROM zasob ORDER BY waga;
SELECT * FROM kreatura ORDER BY dataUr LIMIT 5;

Zadanie 4

SELECT DISTINCT rodzaj FROM zasob;
SELECT CONCAT(nazwa, ' - ', rodzaj) AS kreatura_rodzaj FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT idZasobu, ilosc * waga AS calkowita_waga FROM zasob WHERE YEAR(dataPozyskania) BETWEEN 2000 AND 2007;

Zadanie 5

SELECT 
    nazwa,
    waga * ilosc AS waga_brutto,
    waga * ilosc * 0.7 AS waga_netto,
    waga * ilosc * 0.3 AS waga_odpadkow
FROM 
    zasob
WHERE 
    rodzaj = 'jedzenie';
SELECT * 
FROM zasob
WHERE rodzaj IS NULL;
SELECT DISTINCT nazwa
FROM zasob
WHERE nazwa LIKE 'Ba%' OR nazwa LIKE '%os'
ORDER BY nazwa;


___________________________________________________________________________________________________________________________________________________________

Lekcja 4


Zadanie 1

SELECT AVG(waga) AS srednia_waga
FROM kreatura
WHERE rodzaj = 'wiking';

SELECT rodzaj, 
       AVG(waga) AS srednia_waga, 
       COUNT(*) AS liczba_kreatur
FROM kreatura
GROUP BY rodzaj;

SELECT rodzaj, 
       AVG(YEAR(CURDATE()) - YEAR(dataUr)) AS sredni_wiek
FROM kreatura
GROUP BY rodzaj;


Zadanie 2

SELECT rodzaj, 
       SUM(waga * ilosc) AS suma_wag
FROM zasob
GROUP BY rodzaj;


SELECT nazwa, 
       AVG(waga) AS srednia_waga
FROM zasob
WHERE ilosc >= 4
GROUP BY nazwa
HAVING SUM(waga * ilosc) > 10;


SELECT rodzaj, 
       COUNT(DISTINCT nazwa) AS liczba_nazw
FROM zasob
WHERE ilosc > 1
GROUP BY rodzaj;


Zadanie 3

SELECT k.nazwa AS kreatura, 
       SUM(e.ilosc) AS ilosc_zasobow
FROM kreatura k
JOIN ekwipunek e ON k.idKreatury = e.idKreatury
GROUP BY k.nazwa;


SELECT k.nazwa AS kreatura, 
       GROUP_CONCAT(z.nazwa SEPARATOR ', ') AS zasoby
FROM kreatura k
JOIN ekwipunek e ON k.idKreatury = e.idKreatury
JOIN zasob z ON e.idZasobu = z.idZasobu
GROUP BY k.nazwa;


SELECT k.nazwa 
FROM kreatura k
LEFT JOIN ekwipunek e ON k.idKreatury = e.idKreatury
WHERE e.idKreatury IS NULL;




Zadanie 4

SELECT k.nazwa AS wiking, z.nazwa AS zasob
FROM kreatura k
NATURAL JOIN ekwipunek e
NATURAL JOIN zasob z
WHERE k.rodzaj = 'wiking' AND k.dataUr BETWEEN '1670-01-01' AND '1679-12-31';

(puste czemu to jest puste???????????????)


SELECT k.nazwa AS kreatura, k.dataUr
FROM kreatura k
JOIN ekwipunek e ON k.idKreatury = e.idKreatury
JOIN zasob z ON e.idZasobu = z.idZasobu
WHERE z.rodzaj = 'jedzenie'
ORDER BY k.dataUr DESC
LIMIT 5;


SELECT k1.nazwa AS kreatura1, k2.nazwa AS kreatura2
FROM kreatura k1
JOIN kreatura k2 ON ABS(k1.idKreatury - k2.idKreatury) = 5;


Zadanie 5

SELECT k.rodzaj, 
       AVG(z.waga * e.ilosc) AS srednia_waga_zasobow
FROM kreatura k
JOIN ekwipunek e ON k.idKreatury = e.idKreatury
JOIN zasob z ON e.idZasobu = z.idZasobu
WHERE k.rodzaj NOT IN ('malpa', 'waz') AND e.ilosc < 30
GROUP BY k.rodzaj;


SELECT rodzaj, 
       MIN(dataUr) AS najstarsza_kreatura, 
       MAX(dataUr) AS najmłodsza_kreatura
FROM kreatura
GROUP BY rodzaj;


_____________________________________________________________________________________________________________________________________________

Lekcja 5


Zadanie 1
 (nie mam wszystkich tabeli, robie nowe)



CREATE TABLE IF NOT EXISTS kreatura (
  idKreatura INT PRIMARY KEY AUTO_INCREMENT,
  nazwa VARCHAR(30),
  rodzaj VARCHAR(30),
  dataUr DATE,
  waga INT UNSIGNED,
  udzwig INT UNSIGNED
);


CREATE TABLE IF NOT EXISTS wyprawa (
  idWyprawa INT PRIMARY KEY AUTO_INCREMENT,
  nazwa VARCHAR(100),
  dataPoczatku DATE,
  dataZakonczenia DATE
);


ALTER TABLE kreatura CHANGE idKreatury idKreatura INT;
CREATE INDEX idx_idKreatura ON kreatura(idKreatura);

CREATE TABLE IF NOT EXISTS uczestnicy (
    idUczestnik INT PRIMARY KEY AUTO_INCREMENT,
    idKreatura INT,
    idWyprawa INT,
    FOREIGN KEY (idKreatura) REFERENCES kreatura(idKreatura),
    FOREIGN KEY (idWyprawa) REFERENCES wyprawa(idWyprawa)
);




CREATE TABLE IF NOT EXISTS etapy_wyprawy (
  idEtap INT PRIMARY KEY AUTO_INCREMENT,
  idWyprawa INT,
  nrEtapu INT,
  dataRozpoczecia DATE,
  dataZakonczenia DATE,
  kierownik INT,
  FOREIGN KEY (idWyprawa) REFERENCES wyprawa(idWyprawa),
  FOREIGN KEY (kierownik) REFERENCES kreatura(idKreatura)
);


CREATE TABLE IF NOT EXISTS sektor (
  idSektor INT PRIMARY KEY AUTO_INCREMENT,
  nazwaSektora VARCHAR(100),
  idEtap INT,
  FOREIGN KEY (idEtap) REFERENCES etapy_wyprawy(idEtap)
);



Zadanie 2


SELECT w.nazwa,
       COUNT(u.idKreatura) AS liczba_uczestnikow,
       GROUP_CONCAT(k.nazwa SEPARATOR ', ') AS uczestnicy
FROM wyprawa w
JOIN etapy_wyprawy ew ON w.idWyprawa = ew.idWyprawa
JOIN uczestnicy u ON ew.idWyprawa = u.idWyprawa
JOIN kreatura k ON u.idKreatura = k.idKreatura
GROUP BY w.nazwa;

SELECT ew.dataRozpoczecia, s.nazwaSektora AS sektor, k.nazwa AS kierownik, ew.nrEtapu
FROM etapy_wyprawy ew
JOIN sektor s ON ew.idEtap = s.idEtap
JOIN kreatura k ON ew.kierownik = k.idKreatura
ORDER BY ew.dataRozpoczecia, ew.nrEtapu;


Zadanie 3

SELECT w.nazwa,
       COUNT(u.idKreatura) AS liczba_uczestnikow,
       GROUP_CONCAT(k.nazwa SEPARATOR ', ') AS uczestnicy
FROM wyprawa w
JOIN uczestnicy u ON u.idWyprawa = w.idWyprawa
JOIN kreatura k ON u.idKreatura = k.idKreatura
GROUP BY w.nazwa;


SELECT ew.dataRozpoczecia,
       s.nazwaSektora AS sektor,
       k.nazwa AS kierownik,
       ew.nrEtapu
FROM etapy_wyprawy ew
JOIN sektor s ON ew.idEtap = s.idEtap  -- zmieniamy na odpowiednią kolumnę powiązania
JOIN kreatura k ON ew.kierownik = k.idKreatura
ORDER BY ew.dataRozpoczecia, ew.nrEtapu;



Zadanie 5 


SELECT w.nazwa AS wyprawa,
       COUNT(u.idKreatura) AS liczba_uczestnikow,
       GROUP_CONCAT(k.nazwa SEPARATOR ', ') AS uczestnicy,
       k2.nazwa AS kierownik
FROM wyprawa w
JOIN uczestnicy u ON u.idWyprawa = w.idWyprawa
JOIN kreatura k ON u.idKreatura = k.idKreatura
JOIN etapy_wyprawy ew ON ew.idWyprawa = w.idWyprawa
JOIN kreatura k2 ON ew.kierownik = k2.idKreatura
GROUP BY w.nazwa, k2.nazwa;


_____________________________________________________________________________________________________________________________________________________________

Lekcja 6 



Zadanie 1

DELIMITER $$

CREATE TRIGGER check_waga_before_insert
BEFORE INSERT ON kreatura
FOR EACH ROW
BEGIN
    IF NEW.waga <= 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Waga musi być większa od zera!';
    END IF;
END$$

DELIMITER ;


Zadanie 2


DELIMITER $$

CREATE TRIGGER archive_wyprawa_after_delete
AFTER DELETE ON wyprawa
FOR EACH ROW
BEGIN
    INSERT INTO archiwum_wypraw (id_wyprawy, nazwa, data_rozpoczecia, data_zakonczenia, kierownik)
    VALUES (
        OLD.idWyprawa,
        OLD.nazwa,
        OLD.dataPoczatku,
        OLD.dataZakonczenia,
        (SELECT nazwa
         FROM kreatura k
         JOIN uczestnicy u ON u.idKreatura = k.idKreatura
         WHERE u.idWyprawa = OLD.idWyprawa LIMIT 1)
    );
END$$
DELIMITER ;



Zadanie 3


DELIMITER $$

CREATE PROCEDURE eliksir_sily (IN kreatura_id INT)
BEGIN
    UPDATE kreatura 
    SET udzwig = udzwig * 1.2
    WHERE idKreatura = kreatura_id;
END$$
DELIMITER ;


DELIMITER $$

CREATE FUNCTION text_to_upper(input_text VARCHAR(255)) 
RETURNS VARCHAR(255)
BEGIN
    RETURN UPPER(input_text);
END$$
DELIMITER ;



Zadanie 4


CREATE TABLE IF NOT EXISTS system_alarmowy (
    id_alarmu INT AUTO_INCREMENT PRIMARY KEY,
    wiadomosc VARCHAR(255)
);



DELIMITER $$

CREATE TRIGGER alarm_for_mission
AFTER INSERT ON wyprawa
FOR EACH ROW
BEGIN
    DECLARE teściowa_id INT;
    DECLARE domek_dziadka_id INT;

    SELECT idKreatura INTO teściowa_id FROM kreatura WHERE nazwa = 'Teściowa';
    SELECT idSektora INTO domek_dziadka_id FROM sektor WHERE nazwaSektora = 'Domek Dziadka';

    IF EXISTS (SELECT 1 FROM uczestnicy u 
               JOIN etapy_wyprawy ew ON u.idWyprawa = ew.idWyprawa 
               WHERE u.idKreatura = teściowa_id AND ew.idSektora = domek_dziadka_id) THEN
        INSERT INTO system_alarmowy (wiadomosc) VALUES ('Teściowa nadchodzi !!!');
    END IF;
END$$
DELIMITER ;



Zadanie 5 


DELIMITER $$

CREATE PROCEDURE udzwig_stats (OUT avg_udzwig DECIMAL(10,2), OUT total_udzwig DECIMAL(10,2), OUT max_udzwig INT)
BEGIN
    SELECT AVG(udzwig), SUM(udzwig), MAX(udzwig) INTO avg_udzwig, total_udzwig, max_udzwig
    FROM kreatura;
END$$

DELIMITER ;





DELIMITER $$

CREATE PROCEDURE get_sektory_for_wyprawa (IN wyprawa_id INT)
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE current_sektor VARCHAR(100);
    DECLARE current_sektor_code VARCHAR(10);
    DECLARE cur CURSOR FOR
        SELECT s.nazwaSektora, CONCAT(s.nazwaSektora, '_', s.idSektor)
        FROM sektor s
        JOIN etapy_wyprawy ew ON s.idSektora = ew.idSektora
        WHERE ew.idWyprawa = wyprawa_id
        ORDER BY ew.nrEtapu;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO current_sektor, current_sektor_code;
        IF done THEN
            LEAVE read_loop;
        END IF;
        SELECT current_sektor_code, current_sektor;
    END LOOP;

    CLOSE cur;
END$$

DELIMITER ;




